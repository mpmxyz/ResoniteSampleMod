name: "Init Template"
on:
  workflow_dispatch:
    inputs:
      MOD_NAME:
        type: string
        required: true
        description: "Mod name"
      USER_NAME:
        type: string
        required: false
        description: "User name"
      FORCE_VERSION:
        type: string
        required: false
        default: "1.0.0"
        description: "Force version number"
env:
  REPO_FROM: "mpmxyz/ResoniteSampleMod"
  REPO_KEY: "\"\"REPO\"\""
  REPO_TO: "${{ github.repository }}"
  HARMONY_FROM: "com.github.mpmxyz.SampleMod"
  HARMONY_KEY: "\"\"HARMONY\"\""
  HARMONY_TO: "com.github.${{ github.repository_owner }}.${{ inputs.MOD_NAME }}"
  ASSEMBLY_FROM: "mpmxyz.SampleMod"
  ASSEMBLY_KEY: "\"\"ASSEMBLY\"\""
  ASSEMBLY_TO: "${{ github.repository_owner }}.${{ inputs.MOD_NAME }}"
  MOD_FROM: "SampleMod"
  MOD_KEY: "\"\"MOD\"\""
  MOD_TO: "${{ inputs.MOD_NAME }}"
  USER_FROM: "mpmxyz"
  USER_KEY: "\"\"USER\"\""
  USER_TO: "${{ inputs.USER_NAME || github.repository_owner }}"

permissions:
  contents: write
  issues: write

jobs:
  fill-template-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4.1.1

      - name: "Create new branch"
        run: |
          git checkout -b "project-setup"

      - name: "Escaped repository names"
        id: escape-slashes
        run: |
          echo 'REPO_FROM=${{ env.REPO_FROM }}' | sed -e 's=/=\\/=g' >> "$GITHUB_OUTPUT"
          echo 'REPO_TO=${{ env.REPO_TO }}' | sed -e 's=/=\\/=g' >> "$GITHUB_OUTPUT"
          echo 'MOD_FROM=${{ env.MOD_FROM }}' | sed -e 's=/=\\/=g' >> "$GITHUB_OUTPUT"
          echo 'MOD_TO=${{ env.MOD_TO }}' | sed -e 's=/=\\/=g' >> "$GITHUB_OUTPUT"

      - name: "Debug output"
        run: |
          echo '${{ steps.escape-slashes.outputs.REPO_FROM }}'
          echo '${{ steps.escape-slashes.outputs.REPO_TO }}'

      - name: "Copy .github directory (replacement needs manual action for security reasons)"
        run: |
          cp -r .github .github_new

      - name: "Replace from sample to keys"
        run: |
          find . ! \( -path ./.git -prune \) ! \( -path ./.github -prune \) \
          -exec sed -i \
          -e 's/${{ steps.escape-slashes.outputs.REPO_FROM }}/${{ env.REPO_KEY }}/g' \
          -e 's/${{ env.HARMONY_FROM }}/${{ env.HARMONY_KEY }}/g' \
          -e 's/${{ env.ASSEMBLY_FROM }}/${{ env.ASSEMBLY_KEY }}/g' \
          -e 's/${{ env.MOD_FROM }}/${{ env.MOD_KEY }}/g' \
          -e 's/${{ env.USER_FROM }}/${{ env.USER_KEY }}/g' \
          {} \;

      - name: "Replace from key to target"
        run: |
          find . ! \( -path ./.git -prune \) ! \( -path ./.github -prune \) \
          -exec sed -i \
          -e 's/${{ env.REPO_KEY }}/${{ steps.escape-slashes.outputs.REPO_TO }}/g' \
          -e 's/${{ env.HARMONY_KEY }}/${{ env.HARMONY_TO }}/g' \
          -e 's/${{ env.ASSEMBLY_KEY }}/${{ env.ASSEMBLY_TO }}/g' \
          -e 's/${{ env.MOD_KEY }}/${{ env.MOD_TO }}/g' \
          -e 's/${{ env.USER_KEY }}/${{ env.USER_TO }}/g' \
          {} \;

      - name: "Force version number"
        if: "${{ inputs.FORCE_VERSION != '' }}"
        run: |
          sed -i -e 's=<Version>[^<]*</Version>=<Version>${{ inputs.FORCE_VERSION }}</Version>=g' SampleMod.csproj

      - name: "Rename files"
        run: |
          find . ! \( -path ./.git -prune \) ! \( -path ./.github -prune \) -name '*${{ steps.escape-slashes.outputs.MOD_FROM }}*' -type f -print0 | \
          xargs -0 -I {} sh -c 'mv "{}" "$(dirname "{}")/`echo $(basename "{}") | sed 's/${{ steps.escape-slashes.outputs.MOD_FROM }}/${{ steps.escape-slashes.outputs.MOD_TO }}/g'`"'

      - name: "Push to manifest"
        run: |
          git add .
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "${{ github.actor }}"
          git commit -m "Initialized Template"
          git push --set-upstream origin "project-setup"

  create-todo-issues:
    uses: ./.github/workflows/check-repository-setup.yml
    secrets:
      RML_MANIFEST_TOKEN: "${{ secrets.RML_MANIFEST_TOKEN }}"
      RESONITE_CLONE_TOKEN: "${{ secrets.RESONITE_CLONE_TOKEN }}"
    
    
